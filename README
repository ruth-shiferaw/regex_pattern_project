This is a university project I completed where the program receives a regex, which is a sequence of characters that
defines a search pattern. Then the search patterns work to do “find” or “find-then-replace” operations on a given text.

Description of functionality:
* (Kleene star) - will match the regex character preceding the star 0 or more times
For example, the regex a*bc matches a word consisting of some (possibly zero) numbers of the character a, followed by bc.
? (Question Mark) - will match the regex character preceding the question mark 0 or 1 time, but no more. For example, the regex a?bc matches 
consisting of at most one character a, followed by bc.
~ (Tilde) - will match any group of length between [0, restriction], where restriction length can optionally be changed in the command line. 
This overrides the standard ~ operator found in regex. For example, the regex ~bc will match any word of length at most restriction+2 ending in bc.




Here is my reflection:

1.) Briefly justify the structure of your program; why you defined the functions you did, etc
The structure of my program is as follows. In hw3.c, there is a main function with 2 parameters. The entire purpose of the
main function is to open the input file being specified by the user (will print error message if invalid name is provided)
to collect the integer representing the number of words in the file (will print error message if the integer doesn’t match
the actual amount of words after calling read_file), to collect and update the restriction integer (if specified by the
user), and to contain the main while loop that controls the program’s behavior for calling the recursive function called
match in functions.c. Moving onto functions.c, the file contains two functions and no main function. The first one is called
read_file, and it takes a file name, an array, and a specified size as 3 parameters. The read_file function’s main purpose
is to be called within main in hw3.c, and to be able to take the words stored within the specified file, store each word
(one word per row in a 2D array), check if the amount of words is greater than or equal to the specified integer, then (if
successful and none of the error messages are triggered) return the array back into hw3.c for main to use. The second
function in functions.c, called match, takes 3 parameters: a regex string, a word string, and an integer that represents the
restriction (for the ~ portion). Essentially, match’s structure is set up with one overarching if statement, where each
branch of the if statement checks for the presence of one of the wildcard symbols. If one of the wildcard symbols are
detected within the provided regex, then the function acts accordingly and uses a recursive strategy to check the remaining
provided word and regex to see if they match or not. For example, if the second character of the regex is a * symbol, then
match recursively calls itself with the remaining string’s contents and the word. If the two strings match after the
recursive call(s), then the function returns 1 to main, where main will loop through the remaining words and print the ones
that match the regex. This logic/structure applies for all 3 symbols. However, for the ~ portion, the provided restriction
integer is taken into account, where the words that are equal to or less than the restriction result in the function
returning 1. The ~ portion within match also checks if the regex is composed of only ~ symbols, and will adjust the
restriction value depending on the amount of ~ symbols present within the regex parameter. Match also checks for other cases
where there isn’t a wildcard symbol present, but instead the regex is composed of only letters or other symbols.

2.) Highlight anything you did that was particularly clever
The logic behind the match function is clever (but necessarily so) because of the way recursion is implemented. The way the match 
function within functions.c searches for regex strings only composed of ~ symbols, and the way the main function in hw3.c checks 
for the optional third argument in the command line (for changing the restriction value) took trial and error to implement. They 
required clever methods of implementation in order for them to work properly.
